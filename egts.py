import multiprocessing
import socket
from processing_package import package_data_processing
from threading import Thread

from work_db import connect_main_db, Packet_data, create_check_connect, create_cursor, connect_proc_loc_db, \
                    create_local_cursor, create_th_save_data

from logger_files.logger import Logging
from logger_files.type_text import Types_text

from config import queue_length, devices_count
from datetime import datetime


# Процедура получения и отправки пакетов.
def receive_data(connection, data_for_db, logging):
    try:
        while True:
            # Получаем данные от клиента
            data = connection.recv(1024)

            if not data:
                break

            # print("Получены данные:", data)
            print("Пакет получен: {d} - {data}".format(d=datetime.now().time().strftime('%H:%M:%S'), data=data))
            logging.logging(fromm=1, to=2, type_text=Types_text.SENT_DATA.value, text=data)

            packet = package_data_processing(data, data_for_db, logging)
            connection.send(packet)
            print("Отправлен пакет на пакет: {d} - {packet}".format(
                d=datetime.now().time().strftime('%H:%M:%S'), packet=packet))
            logging.logging(fromm=2, to=1, type_text=Types_text.SENT_DATA.value, text=packet)

    except KeyboardInterrupt:
        pass

    logging.logging(fromm=1, to=2, type_text=Types_text.DISCONNECTED.value)
    # Закрываем соединение.
    connection.close()


# Процедура работы процесса.
def process_work(connection, address):
    # Создаем объект класса, для последующей записи данных в бд.
    data_for_db = Packet_data()
    create_cursor(connect_proc_loc_db())

    logging = Logging(address)
    logging.logging(fromm=1, to=2, type_text=Types_text.CONNECTED.value)

    # Создаем новый поток для обработки данных клиента
    t = Thread(target=receive_data, args=(connection, data_for_db, logging))
    t.start()

    return True


# Процедура работы сервера.
def server_work():
    # Создаем подключение к бд.
    create_cursor(connect_main_db())
    # Создаем подключение к локальной бд процессов.
    create_local_cursor(connect_proc_loc_db())

    # Создаем поток проверки подключения к удаленной бд.
    create_check_connect()
    # Создаем поток сохранения данных в серверную бд.
    create_th_save_data()

    port = 1337

    # Создаем сокет для прослушивания порта
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('', port))
    server_socket.listen(queue_length)

    print("Сервер запущен и слушает порт {}...".format(port))

    # Создаем пул процессов без указания количества процессов (надо будет смотреть. когда процесс конец.)
    # по идее надо будет сделать чтобы в моменте макс подключений было сколько то. то есть процесс для
    # отработанного подключения надо будет удалять или что то делать чтобы могло еще устройство подлкючиться
    with multiprocessing.Pool(5) as pool:
        is_create_proc = True

        try:
            while True:
                if is_create_proc:
                    is_create_proc = False

                    # Принимаем входящее соединение
                    connection, address = server_socket.accept()
                    print("Установлено соединение с {}".format(address))

                    is_create_proc = pool.apply_async(process_work, args=(connection, address))

        except KeyboardInterrupt as e:
            pass

    # # Завершаем пул процессов
    pool.close()
    pool.join()

    # Вот с этим надо разобарться как закрыть подулючение
    # Закрываем соединение с бд.
    Packet_data.db_connection.close()
    Packet_data.loc_db_connection.close()
    # Закрываем сокет.
    server_socket.close()


# Блок кода для тестов.
if __name__ == "__main__":
    # Раскомментить строку.
    server_work()
    # Для тестов
    # a = [
    #     b'\x01\x00\x00\x0b\x00$\x00\x01\x00\x01\x84\x19\x00\x01\x00\x81\x00\x00\x00\x00\x01\x01\x01\x16\x00\x00\x00\x00\x00B868345032085953\xf5\x03\xf9\xce',
    #     b'\x01\x00\x00\x0b\x00$\x00\x02\x00\x01N\x19\x00\x02\x00\x81\x00\x00\x00\x00\x01\x01\x01\x16\x00\x00\x00\x00\x00B868345032085953\xf5\x03\xb7z',
    #     b'\x01\x00\x00\x0b\x00$\x00\x03\x00\x01\x08\x19\x00\x03\x00\x81\x00\x00\x00\x00\x01\x01\x01\x16\x00\x00\x00\x00\x00B868345032085953\xf5\x03\x92\xe6',
    #     b'\x01\x00\x00\x0b\x00$\x00\x04\x00\x01\xeb\x19\x00\x04\x00\x81\x00\x00\x00\x00\x01\x01\x01\x16\x00\x00\x00\x00\x00B868345032085953\xf5\x03\n\x02'
    # ]
    # #
    # b = [
    #     b'\x01\x00\x00\x0b\x00C\x03\x02\x00\x01\xb0\x9c\x00\x02\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\x97\xc4\x83\x19\x00\xech\xaf\x80\x80IH\x9b\x05\x00\x00\x00\x00\x00\x00\x00\x8d\x00\x00\x00\x00\x11\x06\x00\x8e\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x01\x00\x00\x19\x04\x00e\x86\x81\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\x87\x81\x02\x19\x04\x00h\x01\x00\x00\x19\x04\x00i\x97\xff\xc0\x19\x04\x00n\x01\x00\x00\x9c\x00\x03\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xa1\xc4\x83\x19\x00\xebh\xaf\x00{IH\x9b\x01\x00\x00\x00\x00\x00\x00\x00\x89\x00\x00\x00\x00\x11\x06\x00\xae\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x02\x00\x00\x19\x04\x00e\x85\x81\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\x87\x81\x02\x19\x04\x00h\x02\x00\x00\x19\x04\x00i\xa1\xff\xc0\x19\x04\x00n\x02\x00\x00\x9c\x00\x04\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xab\xc4\x83\x19\x00\xe9h\xaf\x80}IH\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x11\x06\x00\xae\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x03\x00\x00\x19\x04\x00e\x84\x81\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\x87\x81\x02\x19\x04\x00h\x03\x00\x00\x19\x04\x00i\xab\xff\xc0\x19\x04\x00n\x03\x00\x00\x9c\x00\x05\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xb5\xc4\x83\x19\x00\xedh\xaf\x80\x8aIH\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x00\x00\x00\x00\x11\x06\x00\xae6\x01\xae\x01\x07\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x04\x00\x00\x19\x04\x00e\x83\x81\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\x87\x81\x02\x19\x04\x00h\x04\x00\x00\x19\x04\x00i\xb5\xff\xc0\x19\x04\x00n\x04\x00\x00\x9c\x00\x06\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xbf\xc4\x83\x19\x00\xf4h\xaf\x80\xa7IH\x9b\x01\x00\x00\x00\x00\x00\x00\x00\x98\x00\x00\x00\x00\x11\x06\x00\xae\xaa\x00\x0e\x01\x07\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x05\x00\x00\x19\x04\x00e\x82\x81\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\x87\x81\x02\x19\x04\x00h\x05\x00\x00\x19\x04\x00i\xbf\xff\xc0\x19\x04\x00n\x05\x00\x00jS',
    #     b'\x01\x00\x00\x0b\x00C\x03\x02\x00\x01\xb0\x9c\x00\x02\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\x97\xc4\x83\x19\x00\xech\xaf\x80\x80IH\x9b\x05\x00\x00\x00\x00\x00\x00\x00\x8d\x00\x00\x00\x00\x11\x06\x00\x8e\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x01\x00\x00\x19\x04\x00e\xbc\x87\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\xbd\x87\x02\x19\x04\x00h\x01\x00\x00\x19\x04\x00i\x97\xff\xc0\x19\x04\x00n\x01\x00\x00\x9c\x00\x03\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xa1\xc4\x83\x19\x00\xebh\xaf\x00{IH\x9b\x01\x00\x00\x00\x00\x00\x00\x00\x89\x00\x00\x00\x00\x11\x06\x00\xae\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x02\x00\x00\x19\x04\x00e\xbb\x87\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\xbd\x87\x02\x19\x04\x00h\x02\x00\x00\x19\x04\x00i\xa1\xff\xc0\x19\x04\x00n\x02\x00\x00\x9c\x00\x04\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xab\xc4\x83\x19\x00\xe9h\xaf\x80}IH\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x11\x06\x00\xae\x0e\x01|\x01\x08\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x03\x00\x00\x19\x04\x00e\xba\x87\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\xbd\x87\x02\x19\x04\x00h\x03\x00\x00\x19\x04\x00i\xab\xff\xc0\x19\x04\x00n\x03\x00\x00\x9c\x00\x05\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xb5\xc4\x83\x19\x00\xedh\xaf\x80\x8aIH\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x00\x00\x00\x00\x11\x06\x00\xae6\x01\xae\x01\x07\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x04\x00\x00\x19\x04\x00e\xb9\x87\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\xbd\x87\x02\x19\x04\x00h\x04\x00\x00\x19\x04\x00i\xb5\xff\xc0\x19\x04\x00n\x04\x00\x00\x9c\x00\x06\x00\x81\x00\x00\x00\x00\x02\x02\x10\x1a\x00\xbf\xc4\x83\x19\x00\xf4h\xaf\x80\xa7IH\x9b\x01\x00\x00\x00\x00\x00\x00\x00\x98\x00\x00\x00\x00\x11\x06\x00\xae\xaa\x00\x0e\x01\x07\x12\x1c\x00\x01\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x02\xf0\x00%\x04\x1b\x07\x00\x02\x00\x00\x00\x00\x00\x00\x1b\x07\x00\x03\x01\x00\x00\x00\x00\x00\x1b\x07\x00\x04\x02\x00\x00\x00\x00\x00\x19\x04\x00d\x05\x00\x00\x19\x04\x00e\xb8\x87\x02\x19\x04\x00f\x01\x00\x00\x19\x04\x00g\xbd\x87\x02\x19\x04\x00h\x05\x00\x00\x19\x04\x00i\xbf\xff\xc0\x19\x04\x00n\x05\x00\x00\xd6\xb9'
    #      ]
    #
    # # Создаем подключение к бд.
    # db_connection = connect_main_db()
    # create_cursor(db_connection)
    #
    # # Создаем поток проверки доступа сервера с бд.
    # # create_check_connect()
    #
    # data_for_db = Packet_data()
    #
    # logging = Logging('address')
    # logging.logging(fromm=1, to=2, type_text=Types_text.CONNECTED.value)
    #
    # packet = package_data_processing(a[0], data_for_db, logging)
    # packet = package_data_processing(b[1], data_for_db, logging)
    #
    #
    # while True:
    #     logging.logging(fromm=1, to=2, type_text=Types_text.SENT_DATA.value, text=b[0])
    #     packet = package_data_processing(b[0], data_for_db, logging)
    #     logging.logging(fromm=2, to=1, type_text=Types_text.SENT_DATA.value, text=packet)
    #
    # Packet_data.db_connection.close()
    #
    # for i in a:
    #     package_data_processing(i)
